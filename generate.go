//go:build ignore
// +build ignore

package main

import (
	"log"
	"os"
	"runtime"
)

func main() {
	// Determine the CFLAGS and LDFLAGS based on the OS
	var cflags, ldflags string
	switch runtime.GOOS {
	case "darwin":
		cflags = "-I/opt/homebrew/include"
		ldflags = "-L/opt/homebrew/lib -lmeos -Wl,-rpath,/opt/homebrew/lib"
	case "linux":
		cflags = "-I/usr/local/include/"
		ldflags = "-L/usr/local/lib -lmeos -Wl,-rpath,/usr/local/lib"
	default:
		log.Fatalf("Unsupported OS: %s", runtime.GOOS)
	}

	// Write the cgo_config.go file with the necessary flags
	configContent := `
// Code generated by generate.go; DO NOT EDIT.

package gomeos

/*
#cgo CFLAGS: ` + cflags + `
#cgo LDFLAGS: ` + ldflags + `
#include "meos.h"
#include "meos_catalog.h"
#include <stdio.h>
#include <stdlib.h>
#include "cast.h"
*/
import "C"
`
	if err := os.WriteFile("cgo_flag_config.go", []byte(configContent), 0644); err != nil {
		log.Fatalf("Failed to write cgo_flag_config.go: %v", err)
	}
}
